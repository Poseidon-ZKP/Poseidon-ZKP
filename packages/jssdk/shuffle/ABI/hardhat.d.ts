/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "DecryptPairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DecryptPairing__factory>;
    getContractFactory(
      name: "DecryptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DecryptVerifier__factory>;
    getContractFactory(
      name: "Shuffle_encryptPairing_30card",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encryptPairing_30card__factory>;
    getContractFactory(
      name: "Shuffle_encryptVerifier_30card",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encryptVerifier_30card__factory>;
    getContractFactory(
      name: "Shuffle_encryptPairing5Card",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encryptPairing5Card__factory>;
    getContractFactory(
      name: "Shuffle_encryptVerifier5Card",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encryptVerifier5Card__factory>;
    getContractFactory(
      name: "Shuffle_encryptPairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encryptPairing__factory>;
    getContractFactory(
      name: "Shuffle_encryptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encryptVerifier__factory>;
    getContractFactory(
      name: "ShuffleEncryptVerifierKey",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShuffleEncryptVerifierKey__factory>;
    getContractFactory(
      name: "Debug",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Debug__factory>;
    getContractFactory(
      name: "Hilo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hilo__factory>;
    getContractFactory(
      name: "ShuffleTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShuffleTest__factory>;
    getContractFactory(
      name: "IDecryptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDecryptVerifier__factory>;
    getContractFactory(
      name: "IShuffleEncryptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IShuffleEncryptVerifier__factory>;
    getContractFactory(
      name: "ZkShuffleCrypto",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkShuffleCrypto__factory>;
    getContractFactory(
      name: "CurveBabyJubJub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveBabyJubJub__factory>;
    getContractFactory(
      name: "Pairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pairing__factory>;
    getContractFactory(
      name: "IBaseGame",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseGame__factory>;
    getContractFactory(
      name: "IShuffleStateManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IShuffleStateManager__factory>;
    getContractFactory(
      name: "ShuffleManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShuffleManager__factory>;
    getContractFactory(
      name: "Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Storage__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "DecryptPairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DecryptPairing>;
    getContractAt(
      name: "DecryptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DecryptVerifier>;
    getContractAt(
      name: "Shuffle_encryptPairing_30card",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encryptPairing_30card>;
    getContractAt(
      name: "Shuffle_encryptVerifier_30card",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encryptVerifier_30card>;
    getContractAt(
      name: "Shuffle_encryptPairing5Card",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encryptPairing5Card>;
    getContractAt(
      name: "Shuffle_encryptVerifier5Card",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encryptVerifier5Card>;
    getContractAt(
      name: "Shuffle_encryptPairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encryptPairing>;
    getContractAt(
      name: "Shuffle_encryptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encryptVerifier>;
    getContractAt(
      name: "ShuffleEncryptVerifierKey",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShuffleEncryptVerifierKey>;
    getContractAt(
      name: "Debug",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Debug>;
    getContractAt(
      name: "Hilo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Hilo>;
    getContractAt(
      name: "ShuffleTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShuffleTest>;
    getContractAt(
      name: "IDecryptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDecryptVerifier>;
    getContractAt(
      name: "IShuffleEncryptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IShuffleEncryptVerifier>;
    getContractAt(
      name: "ZkShuffleCrypto",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkShuffleCrypto>;
    getContractAt(
      name: "CurveBabyJubJub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveBabyJubJub>;
    getContractAt(
      name: "Pairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pairing>;
    getContractAt(
      name: "IBaseGame",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseGame>;
    getContractAt(
      name: "IShuffleStateManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IShuffleStateManager>;
    getContractAt(
      name: "ShuffleManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShuffleManager>;
    getContractAt(
      name: "Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Storage>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
